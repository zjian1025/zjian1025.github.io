<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端编码规范整理</title>
      <link href="/2021/12/06/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%95%B4%E7%90%86/"/>
      <url>/2021/12/06/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>本文整理了前端的常用的编码规范，包括 html css js 一些常用的规范性的写法，能让项目整体更加军队化，易于维护</p><h2 id="HTML章节"><a href="#HTML章节" class="headerlink" title="HTML章节"></a>HTML章节</h2><ol><li><p><strong>html头部声明统一</strong></p></li><li><p><strong>单标签不要写闭合标签</strong></p></li><li><p><strong>自定义属性要以data-开头</strong></p></li><li><p><strong>使用section标签增强SEO</strong></p></li><li><p><strong>html要保持简洁，不要套太多层</strong></p></li><li><p><strong>样式要写在head标签里</strong></p></li><li><p><strong>要在head标签靠前位置写上charset的meta标签</strong></p></li><li><p><strong>特殊符号使用html实体</strong></p></li><li><p><strong>DTD声明</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    ```  </span><br><span class="line">11. **页面编码统一**</span><br></pre></td></tr></table></figure> <meta charset="UTF-8"/>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12. **meta声明**</span><br><span class="line">    (1). **PC端注明: IE兼容/keywords/description**</span><br></pre></td></tr></table></figure>     <meta http-equiv="X-UA-Compatible" content="IE=Edge">     <meta name="title" content="优酷-中国领先视频网站,提供视频播放,视频发布,视频搜索 - 优酷视频">     <meta name="keywords" content="视频,视频分享,视频搜索,视频播放,优酷视频">     <meta name="description" content="视频服务平台,提供视频播放,视频发布,视频搜索,视频分享"> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2). **移动端注明：**</span><br></pre></td></tr></table></figure>     <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">     <meta name="apple-mobile-web-app-capable" content="yes">     <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">     <meta name="format-detection" content="telephone=no, address=no"> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13. 引入CSS, JS</span><br><span class="line">    **根据HTML5规范, 通常在引入CSS和JS时不需要指明 type，因为 text/css 和 text/javascript 分别是他们的默认值**</span><br><span class="line">**HTML5 规范链接：使用link，使用style，使用script**</span><br></pre></td></tr></table></figure>     <!-- External CSS -->     <link rel="stylesheet" href="code_guide.css">     <!-- In-document CSS -->     <style>     ...     </style><pre><code> &lt;!-- External JS --&gt; &lt;script src=&quot;code_guide.js&quot;&gt;&lt;/script&gt; &lt;!-- In-document JS --&gt; &lt;script&gt; ... &lt;/script&gt;</code></pre> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">14. **风格与易读性**</span><br><span class="line">    (1). **格式缩进**</span><br><span class="line">        html编码统一格式化显示，使用一个Tab键进行分层缩进 (2个空格宽度)，使整个页面结构层次清晰，方便阅读和修改。</span><br><span class="line">    (2). **模块注释**</span><br></pre></td></tr></table></figure>  <!-- start: XXX模块 -->  <!-- end: XXX模块 --><p>  或者：</p>  <!-- XXX模块 -->  <!-- /XXX模块 -->  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">15. **标签与属性**</span><br><span class="line">    (1). **html标签和属性不区分大小写,建议都采用小写,尤其是自定义标签和属性名，否则js中取不到**</span><br></pre></td></tr></table></figure>   <div data-bgColor="red"></div>   $('div').data('bgColor');  // 取不到，已自动被浏览器转成了data-bgcolor  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2). **所有html属性必须添加双引号（非单引号）**</span><br></pre></td></tr></table></figure>  // 禁止  <div id=mainframe> 或 <div id='mainframe'>  // 推荐  <div id="mainframe">   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(3). **标签属性顺序**</span><br><span class="line">    属性应该按照特定的顺序出现以保证易读性</span><br><span class="line">    class</span><br><span class="line">id</span><br><span class="line">name</span><br><span class="line">data-*</span><br><span class="line">src, for, type, href, value , max-length, max, min, pattern</span><br><span class="line">placeholder, title, alt</span><br><span class="line">aria-*, role</span><br><span class="line">required, readonly, disabled</span><br><span class="line">class是为高可复用组件设计的，所以应处在第一位；</span><br><span class="line">id更加具体且应该尽量少使用，所以将它放在第二位</span><br><span class="line">(4). **boolean属性**</span><br><span class="line">    boolean属性指不需要声明取值的属性，XHTML需要每个属性声明取值，但是HTML5并不需要；</span><br><span class="line">boolean属性的存在表示取值为true，不存在则表示取值为false。</span><br></pre></td></tr></table></figure>     <input type="text" disabled>     <input type="checkbox" value="1" checked>     <select>         <option value="1" selected>1</option>     </select>     <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">16. **杂项**</span><br><span class="line">    (1).  **所有标签必须采用合理嵌套。**</span><br></pre></td></tr></table></figure>     // 禁止     <p><b></p></b>     // 推荐     <p><b></b></p>     // 禁止inline级标签嵌套block级标签     <span><div></div></span> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2). **img标签中必须添加alt属性,alt 属性应尽可能的描述当前img**</span><br></pre></td></tr></table></figure>     <img src="…" alt="这是一个本网站的logo" /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">## CSS规范</span><br><span class="line">1. **命名**</span><br><span class="line">    (1) **类名使用小写字母，以中划线分隔**</span><br><span class="line">    (2) **id 采用驼峰式命名**</span><br><span class="line">    (3) **scss 中的变量、函数、混合、placeholder 采用驼峰式命名**</span><br><span class="line">    (4) **ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称**</span><br></pre></td></tr></table></figure>     不推荐：     .fw-800 {       font-weight: 800;     }     .red {       color: red;     }     推荐:     .heavy {       font-weight: 800;     }     .important {       color: red;     } <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2. **选择器**</span><br><span class="line">    (1) **css 选择器中避免使用标签名**</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2) **很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）**</span><br></pre></td></tr></table></figure>     不推荐:     .content .title {       font-size: 2rem;     }     推荐:     .content > .title {       font-size: 2rem;     } <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3) **尽量使用缩写属性**</span><br></pre></td></tr></table></figure>     不推荐：     border-top-style: none;     font-family: palatino, georgia, serif;     font-size: 100%;     line-height: 1.6;     padding-bottom: 2em;     padding-left: 1em;     padding-right: 1em;     padding-top: 0;     推荐：     border-top: 0;     font: 100%/1.6 palatino, georgia, serif;     padding: 0 1em 2em; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4) **每个选择器及属性独占一行**</span><br></pre></td></tr></table></figure>     不推荐：     button{       width:100px;height:50px;color:#fff;background:#00a0e9;     }     推荐：     button{       width:100px;       height:50px;       color:#fff;       background:#00a0e9;     } <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    (5) **省略0后面的单位**</span><br><span class="line">***</span><br><span class="line">## js规范</span><br><span class="line">1. **命名规范**</span><br><span class="line">    (1) **避免单字母命名。命名应具备描述性，更加语义化**</span><br><span class="line">    (2) **使用驼峰式命名对象、函数和实例**</span><br><span class="line">    (3) **使用大驼峰（帕斯卡式）命名构造函数或类。**</span><br><span class="line">    (4) **使用下划线 _ 开头命名私有属性**</span><br><span class="line">    (5) **别保存 this 的引用。使用箭头函数或 Function#bind**</span><br><span class="line">    (6) **若文件只输出一个类，则文件名应与类名完全保持一致**</span><br><span class="line">    (7) **当你导出单例、函数库、空对象时使用帕斯卡式命名**</span><br><span class="line">2. **引用**</span><br><span class="line">    (1) **使用const 和 let**</span><br><span class="line">    (2) **对所有的引用使用 const**</span><br><span class="line">    (3) **对于可变的引用使用let**</span><br><span class="line">3. **对象**</span><br><span class="line">    (1) **使用字面量创建对象**</span><br></pre></td></tr></table></figure>     const item = {}; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">(2) **避免使用关键字作为对象的键值  如 var private**</span><br></pre></td></tr></table></figure>     如 var private <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3) **创建有动态属性名的对象时，使用可被计算的属性名称**</span><br></pre></td></tr></table></figure>      function getKey(k) {          return `a key named ${k}`;      }      const obj = {          id: 5,          name: 'San Francisco',          [getKey('enabled')]: true,      }; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4) **使用es6的对象 方法，属性 的简写**</span><br></pre></td></tr></table></figure>     const lukeSkywalker = 'Luke Skywalker';     const atom = {             value: 1,             lukeSkywalker，             addValue(value) {                 return atom.value + value;             },         }; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4. **数组**</span><br><span class="line">    (1) **使用字面量创建数组**</span><br></pre></td></tr></table></figure>     const items = []; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2) **使用 Arrary#push 替代直接赋值。**</span><br></pre></td></tr></table></figure>     const someStack = [];     someStack.push('abracadabra'); <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3) **使用拓展运算符 ... 复制数组。**</span><br></pre></td></tr></table></figure>     const itemsCopy = [...items]; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4) **使用 Array#from 把一个类数组对象转换成数组。**</span><br></pre></td></tr></table></figure>     const foo = document.querySelectorAll('.foo');     const nodes = Array.from(foo); <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5. **解构**</span><br><span class="line">    (1) **使用解构存取和使用多属性对象。**</span><br></pre></td></tr></table></figure>     function getFullName({ firstName, lastName }) {         return `${firstName} ${lastName}`;     } <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2) **对数组使用解构赋值。**</span><br></pre></td></tr></table></figure>     const [first, second] = arr; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3) **需要回传多个值时，使用对象解构，而不是数组解构**</span><br></pre></td></tr></table></figure>     // good     function processInput(input) {     // then a miracle occurs     return { left, right, top, bottom };     }<pre><code> // 调用时只选择需要的数据 const &#123; left, right &#125; = processInput(input);</code></pre> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6. **字符串**</span><br><span class="line">    (1) **字符串使用单引号 &#x27;&#x27;**</span><br></pre></td></tr></table></figure><pre><code> const name = &#39;Capt. Janeway&#39;;</code></pre> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(2) **字符串超过 80 个字节应该使用字符串连接号换行，但是过度使用字串连接符号可能会对性能造成影响**</span><br><span class="line">(3) **使用模板字符串代替字符串连接。**</span><br></pre></td></tr></table></figure><pre><code> function sayHi(name) &#123;     return `How are you, $&#123;name&#125;?`; &#125;</code></pre> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7. **函数**</span><br><span class="line">    (1) **使用函数声明代替函数表达式。**</span><br></pre></td></tr></table></figure><pre><code> // bad   const foo = function () &#123;   &#125;;   // good   function foo() &#123;   &#125;  // 立即调用的函数表达式 (IIFE) (() =&gt; &#123;   console.log(&#39;Welcome to the Internet. Please follow me.&#39;); &#125;)();  //不要在  if 或者 while等非函数代码块将函数赋值给一个变量 //不要使用 arguments。可以选择 rest 语法 ... 替代。 // good   function concatenateAll(...args) &#123;     return args.join(&#39;&#39;);   &#125;</code></pre> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8. **构造函数**</span><br><span class="line">    (1) **总是使用 class。避免直接操作 prototype 。**</span><br></pre></td></tr></table></figure><pre><code> // bad function Queue(contents = []) &#123;     this._queue = [...contents]; &#125; Queue.prototype.pop = function() &#123;     const value = this._queue[0];     this._queue.splice(0, 1);     return value; &#125; // good class Queue &#123;     constructor(contents = []) &#123;         this._queue = [...contents];     &#125;     pop() &#123;         const value = this._queue[0];         this._queue.splice(0, 1);         return value;     &#125; &#125;</code></pre> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2) **使用 extends 继承。因为 extends 是一个内建的原型继承方法并且不会破坏 instanceof。**</span><br></pre></td></tr></table></figure><pre><code> // good class PeekableQueue extends Queue &#123;     peek() &#123;     return this._queue[0];     &#125; &#125;</code></pre> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9.  **模块**</span><br><span class="line">    (1) **使用模组 (import/export) 而不是其他非标准模块系统。你可以编译为你喜欢的模块系统。**</span><br></pre></td></tr></table></figure><pre><code> // bad const AirbnbStyleGuide = require(&#39;./AirbnbStyleGuide&#39;); module.exports = AirbnbStyleGuide.es6; // ok import AirbnbStyleGuide from &#39;./AirbnbStyleGuide&#39;; export default AirbnbStyleGuide.es6;</code></pre> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    // best</span><br><span class="line">    import &#123; es6 &#125; from &#x27;./AirbnbStyleGuide&#x27;;</span><br><span class="line">    export default es6;</span><br><span class="line"></span><br><span class="line">(2) **不要使用通配符 import。这样能确保你只有一个默认 export。**</span><br></pre></td></tr></table></figure><pre><code> // bad import * as AirbnbStyleGuide from &#39;./AirbnbStyleGuide&#39;; // good import AirbnbStyleGuide from &#39;./AirbnbStyleGuide&#39;;</code></pre><p> (3) <strong>不要从 import 中直接 export。</strong></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">// filename es6.js</span><br><span class="line">export &#123; es6 as default &#125; from &#x27;./airbnbStyleGuide&#x27;;</span><br><span class="line">// good</span><br><span class="line">// filename es6.js</span><br><span class="line">import &#123; es6 &#125; from &#x27;./AirbnbStyleGuide&#x27;;</span><br><span class="line">export default es6;</span><br></pre></td></tr></table></figure></li><li><p><strong>Iterators &amp; Generators</strong><br><strong>不要使用 iterators。使用高阶函数例如 map() 和 reduce() 替代 for-of。</strong><br><strong>现在还不要使用 generators。因为它们现在还没法很好地编译到 ES5。</strong></p></li><li><p><strong>属性</strong><br>(1) <strong>使用 . 来访问对象的属性。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      const luke = &#123;</span><br><span class="line">  jedi: true,</span><br><span class="line">  age: 28,</span><br><span class="line">&#125;;</span><br><span class="line">const isJedi = luke.jedi;</span><br></pre></td></tr></table></figure><p>(2) <strong>当通过变量访问属性时使用中括号 []。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">      onst luke = &#123;</span><br><span class="line">  jedi: true,</span><br><span class="line">  age: 28,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function getProp(prop) &#123;</span><br><span class="line">  return luke[prop];</span><br><span class="line">&#125;</span><br><span class="line">const isJedi = getProp(&#x27;jedi&#x27;);</span><br></pre></td></tr></table></figure></li><li><p><strong>变量</strong><br>(1) <strong>避免使用全局变量</strong><br>(2) <strong>使用 let /const 声明每一个变量。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      // bad</span><br><span class="line">const items = getItems(),</span><br><span class="line">goSportsTeam = true,</span><br><span class="line">dragonball = &#x27;z&#x27;;</span><br><span class="line">// good</span><br><span class="line">const items = getItems();</span><br><span class="line">const goSportsTeam = true;</span><br><span class="line">const dragonball = &#x27;z&#x27;;</span><br></pre></td></tr></table></figure><p>(3) <strong>在你需要的地方给变量赋值，但请把它们放在一个合理的位置。（let 和 const 是块级作用域而不是函数作用域。）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function(hasName) &#123;</span><br><span class="line">    if (!hasName) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    const name = getName();</span><br><span class="line">    this.setFirstName(name);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) <strong>将所有的 const 和 let 分组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// good</span><br><span class="line">const goSportsTeam = true;</span><br><span class="line">const items = getItems();</span><br><span class="line">let dragonball;</span><br><span class="line">let i;</span><br><span class="line">let length;</span><br></pre></td></tr></table></figure></li><li><p><strong>比较运算符 &amp; 等号</strong><br>(1) <strong>优先使用 === 和 !== 而不是 == 和 !=.</strong><br>(2) <strong>条件表达式例如 if 语句通过抽象方法 ToBoolean 强制计算它们的表达式并且总是遵守下面的规则</strong></p><pre><code>* 对象 被计算为 true* Undefined 被计算为 false* Null 被计算为 false* 布尔值 被计算为 布尔的值* 数字 如果是 +0、-0、或 NaN 被计算为 false, 否则为 true* 字符串 如果是空字符串 &#39;&#39; 被计算为 false，否则为 true</code></pre></li><li><p><strong>代码块</strong><br>(1) <strong>使用大括号包裹所有的多行代码块。</strong><br>(2) <strong>如果通过 if 和 else 使用多行代码块，把 else 放在 if 代码块关闭括号的同一行。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      // good</span><br><span class="line">if (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注释</strong><br>(1) <strong>使用 /</strong> … <em>/ 作为多行注释。包含描述、指定所有参数和返回值的类型和值。</em>*</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">      /**</span><br><span class="line"> * make() returns a new element</span><br><span class="line"> * based on the passed in tag name</span><br><span class="line"> *</span><br><span class="line"> * @param &#123;String&#125; tag</span><br><span class="line"> * @return &#123;Element&#125; element</span><br><span class="line"> */</span><br><span class="line">function make(tag) &#123;</span><br><span class="line"></span><br><span class="line">  // ...stuff...</span><br><span class="line"></span><br><span class="line">  return element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) <strong>使用 // 作为单行注释。在评论对象上面另起一行使用单行注释。在注释前插入空行。</strong></p></li><li><p><strong>空白</strong><br>(1) <strong>使用 2 个空格作为缩进。</strong><br>(2) <strong>在花括号前放一个空格。</strong><br>(3) <strong>控制语句（if、while 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">if(isJedi) &#123;</span><br><span class="line">fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">if (isJedi) &#123;</span><br><span class="line">fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// bad</span><br><span class="line">function fight () &#123;</span><br><span class="line">console.log (&#x27;Swooosh!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">function fight() &#123;</span><br><span class="line">console.log(&#x27;Swooosh!&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) <strong>使用空格把运算符隔开。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      // good</span><br><span class="line">const x = y + 5;</span><br></pre></td></tr></table></figure><p>(5) <strong>在块末和新语句前插入空行。</strong></p></li><li><p>逗号<br>(1) <strong>行首逗号：不需要。</strong><br>(2) <strong>增加结尾的逗号: 需要。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// good</span><br><span class="line">const hero = &#123;</span><br><span class="line">    firstName: &#x27;Dana&#x27;,</span><br><span class="line">    lastName: &#x27;Scully&#x27;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const heroes = [</span><br><span class="line">    &#x27;Batman&#x27;,</span><br><span class="line">    &#x27;Superman&#x27;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li><p>分号<br>(1) <strong>使用分号</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">      // bad</span><br><span class="line">(function() &#123;</span><br><span class="line">  const name = &#x27;Skywalker&#x27;</span><br><span class="line">  return name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">(() =&gt; &#123;</span><br><span class="line">  const name = &#x27;Skywalker&#x27;;</span><br><span class="line">  return name;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// good (防止函数在两个 IIFE 合并时被当成一个参数)</span><br><span class="line">      ;(() =&gt; &#123;</span><br><span class="line">  const name = &#x27;Skywalker&#x27;;</span><br><span class="line">  return name;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ol><hr><p><strong>参考资料</strong><br>Airbnb JavaScript 代码规范（ES6）：<a href="https://www.kancloud.cn/kancloud/javascript-style-guide/43146">https://www.kancloud.cn/kancloud/javascript-style-guide/43146</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sass基础</title>
      <link href="/2021/12/01/sass_basic/"/>
      <url>/2021/12/01/sass_basic/</url>
      
        <content type="html"><![CDATA[<h1 id="Sass基础"><a href="#Sass基础" class="headerlink" title="Sass基础"></a>Sass基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>  sass的一个重要特性就是它为css引入了变量。<br>  你可以把反复使用的css属性值 定义成变量，然后通过变量名来引用它们，而无需重复书写这一属性值。<br>  或者，对于仅使用过一 次的属性值，你可以赋予其一个易懂的变量名，让人一眼就知道这个属性值的用途。</p><hr><h2 id="1-使用变量"><a href="#1-使用变量" class="headerlink" title="1.使用变量"></a>1.使用变量</h2><pre><code>//声明变量  $bg-color : #606060;  //使用变量  div&#123;  $width: 100px;  width: $width;  height:100px;  background-color:$bg-color;  &#125;</code></pre><ul><li>$width只能用在代码块儿div内，$bg-color 可以在整个样式中用（ $bg-color 与$bg_color 是一样的 ）</li></ul><hr><h2 id="2-嵌套CSS-规则"><a href="#2-嵌套CSS-规则" class="headerlink" title="2.嵌套CSS 规则"></a>2.嵌套CSS 规则</h2><pre><code>//sass中可以这样写#content &#123;  article &#123;  h1 &#123; color: #333 &#125;  p &#123; margin-bottom: 1.4em &#125;  &#125;  aside &#123; background-color: #EEE &#125;&#125;//编译后为#content article h1 &#123; color: #333 &#125;#content article p &#123; margin-bottom: 1.4em &#125;#content aside &#123; background-color: #EEE &#125;</code></pre><h3 id="2-1-父选择器的标识符-amp"><a href="#2-1-父选择器的标识符-amp" class="headerlink" title="2.1 父选择器的标识符&amp;"></a>2.1 父选择器的标识符&amp;</h3><pre><code>  //样例1  article a &#123;    color: blue;    &amp;:hover &#123; color: red &#125;  &#125;  //样例2  #content aside &#123;    color: red;    body.ie &amp; &#123; color: green &#125;  &#125;</code></pre><h3 id="2-2-群组选择器的嵌套"><a href="#2-2-群组选择器的嵌套" class="headerlink" title="2.2 群组选择器的嵌套"></a>2.2 群组选择器的嵌套</h3><pre><code>  //样例1  article a &#123;    color: blue;    &amp;:hover &#123; color: red &#125;  &#125;  //样例2  #content aside &#123;    color: red;    body.ie &amp; &#123; color: green &#125;  &#125;</code></pre><h3 id="2-3-子组合选择器和同层组合选择器：-gt-、-和"><a href="#2-3-子组合选择器和同层组合选择器：-gt-、-和" class="headerlink" title="2.3 子组合选择器和同层组合选择器：&gt;、+和~"></a>2.3 子组合选择器和同层组合选择器：&gt;、+和~</h3><pre><code>  //选择article下紧跟着的子元素中命中section选择器的元素  article &gt; section &#123; border: 1px solid #ccc &#125;   //选择header元素后紧跟的p元素  header + p &#123; font-size: 1.1em &#125;  //选择所有跟在article后的同层article元素，不管它们之间隔了多少其他元素  article ~ article &#123; border-top: 1px dashed #ccc &#125;    //总样例  article &#123;    ~ article &#123; border-top: 1px dashed #ccc &#125;    &gt; section &#123; background: #eee &#125;    dl &gt; &#123;      dt &#123; color: #333 &#125;      dd &#123; color: #555 &#125;    &#125;    nav + &amp; &#123; margin-top: 0 &#125;  &#125;</code></pre><h3 id="2-4-嵌套属性"><a href="#2-4-嵌套属性" class="headerlink" title="2.4 嵌套属性"></a>2.4 嵌套属性</h3><pre><code>  // 样例1  nav &#123;    border: &#123;      style: solid;      width: 1px;      color: #ccc;    &#125;  &#125;  // 样例2  nav &#123;    border: 1px solid #ccc &#123;      left: 0px;      right: 0px;    &#125;  &#125;</code></pre><hr><h2 id="3-导入SASS文件"><a href="#3-导入SASS文件" class="headerlink" title="3.导入SASS文件"></a>3.导入SASS文件</h2><p>  css 的@import规则，只有执行到@import时，浏览器才会去下载其他css文件，这导致页面加载起来特别慢。<br>    sass的@import规则，在生成css文件时就把相关文件导入进来</p><h3 id="3-1-使用SASS部分文件"><a href="#3-1-使用SASS部分文件" class="headerlink" title="3.1 使用SASS部分文件"></a>3.1 使用SASS部分文件</h3><pre><code>通过@import把sass样式分散到多个文件，一般约定，sass局部文件的文件名以下划线开头    例如：想导入themes/_night-sky.scss 只需 @import &quot;themes/night-sky&quot;</code></pre><h3 id="3-2-默认变量值"><a href="#3-2-默认变量值" class="headerlink" title="3.2 默认变量值"></a>3.2 默认变量值</h3><pre><code>  //如果在导入局部文件之前声明了一个$fancybox-width变量，则局部文件中对$fancybox-width赋值400px的操作就无效。  //如果用户没有做这样的声明，则$fancybox-width将默认为400px。  $fancybox-width: 400px !default;  .fancybox &#123;    width: $fancybox-width;  &#125;</code></pre><h3 id="3-3-嵌套导入"><a href="#3-3-嵌套导入" class="headerlink" title="3.3 嵌套导入"></a>3.3 嵌套导入</h3><pre><code>.blue-theme &#123;  //@import &quot;blue-theme&quot;&#125;  </code></pre><h3 id="3-4-原生的CSS导入"><a href="#3-4-原生的CSS导入" class="headerlink" title="3.4 原生的CSS导入"></a>3.4 原生的CSS导入</h3><pre><code>不能用sass的@import直接导入一个原始的css文件,    可以把原始的css文件改名为.scss后缀，即可直接导入了</code></pre><hr><h2 id="4-静默注释"><a href="#4-静默注释" class="headerlink" title="4.静默注释"></a>4.静默注释</h2><pre><code>body &#123;  color: #333; // 这种注释内容不会出现在生成的css文件中  padding: 0; /* 这种注释内容会出现在生成的css文件中 */&#125;</code></pre><hr><h2 id="5-混合器"><a href="#5-混合器" class="headerlink" title="5.混合器"></a>5.混合器</h2><pre><code>可以通过sass的混合器实现大段样式的重用//定义一个混合器 @mixin @mixin rounded-corners &#123;  -moz-border-radius: 5px;  -webkit-border-radius: 5px;  border-radius: 5px;&#125;//使用混合器 @includenotice &#123;  background-color: green;  border: 2px solid #00aa00;  @include rounded-corners;&#125;//给混合器传参@mixin link-colors($normal, $hover, $visited) &#123;  color: $normal;  &amp;:hover &#123; color: $hover; &#125;  &amp;:visited &#123; color: $visited; &#125;&#125;a &#123;  @include link-colors(blue, red, green);&#125;</code></pre><hr><h2 id="6-使用选择器继承来精简CSS-extend"><a href="#6-使用选择器继承来精简CSS-extend" class="headerlink" title="6.使用选择器继承来精简CSS @extend"></a>6.使用选择器继承来精简CSS <em>@extend</em></h2><pre><code>//通过选择器继承继承样式.error &#123;  border: 1px solid red;  background-color: #fdd;&#125;.seriousError &#123;  @extend .error;  border-width: 3px;&#125;//继承的高级用法//定义了一个名为disabled的类，样式修饰使它看上去像一个灰掉的超链接，//通过继承a这一超链接元素来实现.disabled &#123;  color: gray;  @extend a;&#125;</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 常用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2021/11/16/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/16/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为最近工作时，总是会需要到git命令操作，但是本人又不熟悉命令行，每次都要问下度娘，所以还是辛苦点 自己总结一下</p><hr><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li><p>Windows:<br>官方网站下载<a href="https://git-scm.com/download/win%E5%AE%89%E8%A3%85%EF%BC%8C%E4%B8%8B%E4%B8%80%E6%AD%A5%E4%B8%8B%E4%B8%80%E6%AD%A5%E5%B0%B1%E8%A1%8C">https://git-scm.com/download/win安装，下一步下一步就行</a></p></li><li><p>Macos:<br>最简单的方法是安装 Xcode Command Line Tools<br>也可以从官网下载安装 <a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a></p></li><li><p><em>安装完后输入</em>*  </p><pre><code>   git --version</code></pre><p>出现了如下的版本号就ok</p><img src="/images/git-01.png"></li></ul><hr><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。<br>你可以通过以下命令查看所有的配置以及它们所在的文件：</p><pre><code>git config --list --show-origin</code></pre><h6 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h6><pre><code>设置你的用户名和邮件地址git config --global user.name &quot;John Doe&quot;git config --global user.email johndoe@example.com检查你的配置git config –-list检查某一项配置git config user.name</code></pre><hr><h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><ol><li><p>获取git仓<br> <strong>将尚未进行版本控制的本地目录转换为 Git 仓库</strong></p><pre><code> git init git add *.c git add LICENSE git commit -m &#39;initial project version&#39;</code></pre><p> <strong>从其它服务器 克隆 一个已存在的 Git 仓库。</strong></p><pre><code> git clone https://github.com/libgit2/libgit2</code></pre><p> <strong>检查当前文件状态</strong></p><pre><code> git status</code></pre><p> <strong>追踪新文件或者将需要提交的文件放入缓存区，待下一次的提交</strong></p><pre><code> git add xxx</code></pre><p> <strong>查看未添加到暂存区的文件修改的内容</strong></p><pre><code> git diff</code></pre><p> <strong>查看暂存区文件的修改</strong></p><pre><code> git diff –staged</code></pre><p> <strong>提交更新</strong></p><pre><code> git commit</code></pre><p> <strong>所有已经跟踪过的文件暂存起来一并提交，跳过git add步骤</strong></p><pre><code> git commit -a -m &#39;added new benchmarks&#39;</code></pre><p> <strong>移除文件</strong></p><pre><code> git rm</code></pre><p> <strong>查看提交历史</strong></p><pre><code> git log git log -p -2</code></pre><p> -p 显示每次提交文件的差异 -2 显示最近两次的提交<br> <strong>撤销操作，重新提交（提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了）</strong></p><pre><code> git commit --amend</code></pre><p> <strong>取消暂存某文件</strong></p><pre><code> git reset HEAD xxx</code></pre><p> <strong>撤消对文件的修改</strong></p><pre><code> git checkout – xxx</code></pre><p> <strong>查看远程仓库</strong></p><pre><code> git remote -v</code></pre><p> <strong>添加远程仓库</strong></p><pre><code> git remote add pb https://github.com/paulboone/ticgit</code></pre><p> <strong>从远程仓库中抓取与拉取</strong></p><pre><code> git fetch &lt;remote&gt;</code></pre><p> <strong>推送到远程仓库</strong></p><pre><code> git push origin master</code></pre><p> <strong>查看某个远程仓库</strong></p><pre><code> git remote show origin</code></pre><p> <strong>远程仓库的重命名与移除</strong></p><pre><code> git remote rename pb paul</code></pre><p> <strong>Git 别名</strong></p><pre><code> //输入 git checkout时，只需要输入 git co git config --global alias.co checkout </code></pre><p> <strong>创建分支</strong></p><pre><code> git branch testing</code></pre><p> <strong>切换分支</strong></p><pre><code> git checkout testing</code></pre></li></ol><hr><p><strong>参考资料</strong><br><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%91%BD%E4%BB%A4%E8%A1%8C">https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%91%BD%E4%BB%A4%E8%A1%8C</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 常用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/12/hello-world/"/>
      <url>/2021/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>异步无刷新请求</title>
      <link href="/2021/11/11/%E5%BC%82%E6%AD%A5%E6%97%A0%E5%88%B7%E6%96%B0%E8%AF%B7%E6%B1%82/"/>
      <url>/2021/11/11/%E5%BC%82%E6%AD%A5%E6%97%A0%E5%88%B7%E6%96%B0%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>通过浏览器提供的一个JS API, 向服务端发送一个请求，返回的数据被JS 接收，然后再用JS的操作，将数据渲染到DOM；</p><hr><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><pre><code>现代的浏览器支持多个具有HTTP的 API:</code></pre><ul><li>XMLHttpRequest<br>  出现较早，浏览器支持最好，但是比较陈旧，一些新的js语言特性需要封装（如：Promise）</li><li>Fetch<br>  比较新，对一些新的特性有天然的良好的支持（如:Promise CORS）,但是兼容不好，而且缺少事件支持<br>  <em>这里解释下,跨源资源共享（CORS），是一种基于HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其它origin（域，协议和端口），这样浏览器可以访问加载这些资源。更通俗的来说，就是用来处理跨域请求的一系列的请求头（具体可查看MDN文档<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS%EF%BC%89">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS）</a></em></li></ul><hr><h2 id="Fetch的使用"><a href="#Fetch的使用" class="headerlink" title="Fetch的使用"></a>Fetch的使用</h2><p>它返回一个 promise，这个 promise 会在请求响应后被 resolve，并传回 Response 对象。</p><ul><li>语法:    <strong>Promise<Response> fetch(input[, init])</strong>;</li><li>input: 请求的url或者是一个Request对象</li><li>init:可选参数<ol><li>   <strong>method</strong>: GET或者POST</li><li>   <strong>headers</strong>: 请求的头信息</li><li>   <strong>body</strong>: 请求的 body 信息</li><li>   <strong>mode</strong>: 请求的模式，如 cors、 no-cors 或者 same-origin</li><li>   <strong>mode</strong>: 请求的模式，如 cors、 no-cors 或者 same-origin</li><li>   <strong>cache</strong>:  请求的 cache 模式, default、 no-store、 reload no-cache 、 force-cache 或者 only-if-cached</li><li>   <strong>redirect</strong>: 可用的 redirect 模式: follow (自动重定向), error (如果产生重定向将自动终止并且抛出一个错误）, 或者 manual (手动处理重定向)</li></ol></li></ul><h6 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h6><pre><code>var myImage = document.querySelector(&#39;img&#39;);var myHeaders = new Headers();myHeaders.append(&#39;Content-Type&#39;, &#39;image/jpeg&#39;);var myInit = &#123;     method: &#39;GET&#39;,    headers: myHeaders,    mode: &#39;cors&#39;,    cache: &#39;default&#39; &#125;;var myRequest = new Request(&#39;flowers.jpg&#39;);fetch(myRequest,myInit).then(function(response) &#123;...&#125;);</code></pre><p><em>因为Fetch的缺点，所以本文就简略介绍，有兴趣的小伙伴们可以到MDN上查阅文档</em><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p><hr><h2 id="XMLHttpRequest使用"><a href="#XMLHttpRequest使用" class="headerlink" title="XMLHttpRequest使用"></a>XMLHttpRequest使用</h2><p>在不影响用户使用，能够刷新网页局部内容，XMLHttpRequest(XHR)对象在AJAX编程中被大量使用</p><ul><li><strong>XMLHttpRequest()构造函数，用来创建XHR实例对象</strong></li><li><strong>属性</strong><ul><li><strong>onreadystatechange</strong>: 当 readyState 属性发生变化时,调用的event handler</li><li><strong>readyState</strong>:请求的状态码</li><li><strong>response</strong>：整个响应实体</li><li><strong>responseText</strong>：对请求的响应</li><li><strong>responseType</strong>：定义响应类型</li><li><strong>responseURL</strong>: 返回经过序列化（serialized）的响应 URL</li><li><strong>responseXML</strong>：该请求的响应</li><li><strong>status</strong>：请求的响应状态 200 400….</li><li><strong>statusText</strong>：服务器返回的响应状态 “200 OK”</li><li><strong>timeout</strong>：数字，表示该请求的最大请求时间（毫秒），若超出该时间，请求会自动终止。</li><li><strong>ontimeout</strong>：当请求超时调用的 event handler</li><li><strong>upload</strong>: 代表上传进度。</li><li><strong>withCredentials</strong>: 一个布尔值，用来指定跨域 Access-Control 请求是否应当带有授权信息，如 cookie 或授权 header 头。</li></ul></li><li><strong>方法</strong><ul><li>**abort()**：如果请求已被发出，则立刻中止请求。</li><li>**getAllResponseHeaders()**：所有用 CRLF 分隔的响应头</li><li>**getResponseHeader()**：指定响应头的字符串</li><li>**open()**：初始化一个请求</li><li>**overrideMimeType()**：覆写由服务器返回的 MIME 类型</li><li>**send()**：发送请求。</li><li>**setRequestHeader()**：设置 HTTP 请求头的值。必须在 open() 之后、send() 之前调用 setRequestHeader() 方法。</li></ul></li><li><strong>事件</strong><ul><li><strong>onabort</strong>:请求被停止时</li><li><strong>onerror</strong>：请求报错时</li><li><strong>onload</strong>：请求完成时</li><li><strong>onloadend</strong>：请求结束时，不论成功或者失败</li><li><strong>onloadstart</strong>：请求接收到响应数据</li><li><strong>onprogress</strong>：当请求接收到更多的数据，周期性的触发(可用来处理上传)</li><li><strong>ontimeout</strong>：请求超时</li></ul></li><li><strong>使用示例</strong> <pre><code>  //创建XMR对象  const xhr = new XMLHttpRequest();  //配置请求参数  xhr.open(&quot;post&quot;,url,false);//false为同步 true为异步  //  xhr.responseType = &quot;JSON&quot;  //设置请求头  xhr.setRequestHeader(&#39;Content-Type&#39;,&#39;application/x-www-form-urlencoded&#39;);  //如果我们提交的是表单数据 formdata  let fd = new FormData();  fd.append(&#39;name&#39;,&#39;1111&#39;);  // 回调事件  xhr.onload = function () &#123;      console.log(xhr.response)      console.log(xhr.responseText)      console.log(xhr.responseType)      console.log(xhr.responseURL)      console.log(xhr.status)      console.log(xhr.statusText)      console.log(xhr.response)  &#125;  //发送请求  xhr.send(fd);  xhr.onloadstart = function()&#123;      console.log(&#39;服务端开始下载了&#39;)  &#125;  // 上传文件  xhr.upload.onloadstart = function()&#123;      console.log(&#39;开始上传了&#39;)  &#125;  xhr.upload.onprogress = function(e)&#123;      console.log(&#39;间隔触发 100ms左右触发一次&#39;)      console.log(e.loaded)      console.log(e.total)  &#125;  xhr.upload.onload = function()&#123;      console.log(&#39;上传完成&#39;)  &#125;</code></pre></li></ul><hr><p><strong>参考资料</strong><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 常用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本机localhost映射dns解析</title>
      <link href="/2021/11/03/%E6%9C%AC%E6%9C%BAlocalhost%E6%98%A0%E5%B0%84dns%E8%A7%A3%E6%9E%90/"/>
      <url>/2021/11/03/%E6%9C%AC%E6%9C%BAlocalhost%E6%98%A0%E5%B0%84dns%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="本机localhost映射dns解析"><a href="#本机localhost映射dns解析" class="headerlink" title="本机localhost映射dns解析"></a>本机localhost映射dns解析</h2><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><pre><code>C:\Windows\System32\drivers\etc目录下找到hosts文件 ， 进入修改</code></pre><ol><li>最后一行添加127.0.0.1 空格 写自己的域名映射  </li><li>增加后进入cmd命令行窗口输入ipconfig /flushdns刷新dns解析  </li><li>此后就可以通过自己写的域名访问自己本机上的域名了</li></ol><p>如下：<br>    <img src="/images/localhost.png" /></p><p>之后你的访问路径就可以是：<br>    <a href="http://mytest.com:8080/">http://mytest.com:8080</a> 相当于 localhost:8080</p>]]></content>
      
      
      <categories>
          
          <category> 常用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
